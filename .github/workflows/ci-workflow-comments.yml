name: Continuous integration Add comments

on:
  workflow_run:
    workflows: ["Continuous integration"]
    types:
      - completed

jobs:
  use_output:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        id: get_artifact
        
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "interaction_data"
            })[0];
            
            if(matchArtifact == undefined) {
              console.log("No artifact found")
              core.setOutput('stop', 'true');
            }

            let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/interaction_data.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        if: ${{ steps.get_artifact.outputs.stop != 'true' }}
        run: unzip interaction_data.zip


      - name: 'Comment on PR'
        if: ${{ steps.get_artifact.outputs.stop != 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            async function upsertComment(owner, repo, issue_number, marker, body) {
              const {data: comments} = await github.rest.issues.listComments(
                {owner, repo, issue_number});

              body = marker + "\n" + body;

              const existing = comments.filter((c) => c.body.includes(marker));
              if (existing.length > 0) {
                const last = existing[existing.length - 1];
                core.info(`Updating comment ${last.id}`);
                await github.rest.issues.updateComment({
                  owner, repo,
                  body,
                  comment_id: last.id,
                });
              } else {
                core.info(`Creating a comment in issue / PR #${issue_number}`);
                await github.rest.issues.createComment({issue_number, body, owner, repo});
              }
            }


            async function run(){
              
              const {owner, repo} = context.repo;

              let interaction_data = JSON.parse(fs.readFileSync('./interaction_data.json'));

              await Promise.all(interaction_data.map(async (data) => {
                const {mode, marker, issue_number, body} = data;

                if(mode === 'upsert'){
                  await upsertComment(owner, repo, issue_number, marker, body);
                }else if(mode === 'insert'){
                  await github.rest.issues.createComment({issue_number, body, owner, repo});
                }
              }));
            }

            run();

            


